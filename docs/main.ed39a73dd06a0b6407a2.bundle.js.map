{"version":3,"file":"main.ed39a73dd06a0b6407a2.bundle.js","sources":["webpack:///./src/textInput/index.tsx","webpack:///./src/pill/index.tsx","webpack:///./src/switch/index.tsx","webpack:///./src/globalStyle/index.tsx","webpack:///./src/buttonGroup/index.tsx","webpack:///./src/checkbox/index.tsx","webpack:///./src/formSection/index.tsx","webpack:///./src/panel/index.tsx","webpack:///./src/progressBar/index.tsx","webpack:///./src/select/index.tsx","webpack:///./src/button/index.tsx"],"sourcesContent":["import { mix, transparentize } from 'polished';\nimport styled from 'styled-components';\n\nexport interface ITextInputProps {\n  theme: DefaultTheme;\n  error?: boolean;\n}\n\nfunction getBorderColor(props: ITextInputProps) {\n  if (props.error) {\n    return props.theme.colors.error;\n  }\n\n  return props.theme.colors.secondary;\n}\n\nfunction getFocusedBorderColor(props: ITextInputProps) {\n  if (props.error) {\n    return props.theme.colors.error;\n  }\n\n  return props.theme.colors.main;\n}\n\nconst TextInput = styled.input<ITextInputProps>`\n  background-color: ${props => props.theme.colors.white};\n  border: 1px solid ${getBorderColor};\n  border-radius: ${props => props.theme.borderRadius};\n  transition: 0.25s border-color ease-in-out;\n  cursor: text;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  font-size: 1em;\n  padding: 0.75em 1em;\n  outline: 0;\n\n  &::placeholder {\n    color: ${props => props.theme.colors.secondary};\n  }\n\n  &:hover {\n    border-color: ${props => mix(0.5, props.theme.colors.white, getFocusedBorderColor(props))};\n  }\n\n  &:focus {\n    border-color: ${getFocusedBorderColor};\n    box-shadow: 0 0 0 2px ${props => transparentize(0.75, getFocusedBorderColor(props))};\n  }\n\n  &:disabled {\n    border-color: ${props => props.theme.colors.secondary};\n    background-color: ${props => mix(0.5, props.theme.colors.white, props.theme.colors.secondary)};\n    cursor: default;\n  }\n`;\n\nTextInput.displayName = 'TextInput';\n\nexport default TextInput;\n","import { getLuminance } from 'polished';\nimport styled from 'styled-components';\n\nconst DEFAULT_COLOR = 'main';\n\nexport interface IPillProps {\n  theme: DefaultTheme;\n  color?: string;\n}\n\nfunction getPillColor(props: IPillProps): string {\n  return props.theme.colors[props.color || DEFAULT_COLOR];\n}\n\nfunction getPillTextColor(props: IPillProps): string {\n  const bgColor = getPillColor(props);\n  return getLuminance(bgColor) > 0.5 ? props.theme.colors.darkGray : props.theme.colors.white;\n}\n\nconst Pill = styled.span<IPillProps>`\n  background-color: ${getPillColor};\n  color: ${getPillTextColor};\n  margin-right: 5px;\n  font-size: 1em;\n  padding: 0.25em 0.75em;\n  border-radius: 100px;\n  text-transform: uppercase;\n  letter-spacing: 0.0625em;\n  vertical-align: middle;\n  cursor: default;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n`;\n\nPill.displayName = 'Pill';\n\nexport default Pill;\n","import styled from 'styled-components';\n\nexport interface ISwitchProps {\n  theme: DefaultTheme;\n  on?: boolean;\n  disabled?: boolean;\n}\n\nfunction getSwitchColor(props: ISwitchProps) {\n  return props.on ? props.theme.colors.main : props.theme.colors.secondary;\n}\n\nconst Switch = styled.button<ISwitchProps>`\n  height: 1em;\n  width: 2.5em;\n  background-color: ${getSwitchColor};\n  border: 0;\n  outline: 0;\n  height: 1em;\n  border-radius: 100px;\n  padding: 0.75em 1em;\n  font-size: 1em;\n  line-height: 1em;\n  box-sizing: content-box;\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n  transition: 0.25s background-color ease-in-out;\n  display: inline-block;\n  vertical-align: middle;\n\n  &::before {\n    width: 1em;\n    height: 1em;\n    padding: 0.5em;\n    border-radius: 100px;\n    background-color: ${props => props.theme.colors.white};\n    display: block;\n    content: '';\n    position: absolute;\n    top: 50%;\n    right: ${props => (props.on ? '0.25em' : 'calc(100% - 2.25em)')};\n    transition: 0.25s right ease-in-out;\n    transform: translateY(-50%);\n  }\n\n  &:disabled {\n    cursor: default;\n    opacity: 0.5;\n    background-color: ${getSwitchColor};\n  }\n`;\n\nSwitch.displayName = 'Switch';\n\nexport default Switch;\n","import { createGlobalStyle } from 'styled-components';\n\nexport interface IGlobalStyleProps {\n  theme: DefaultTheme;\n}\n\nfunction getFontImport(props: IGlobalStyleProps) {\n  if (!props.theme.fontImportUrl) {\n    return '';\n  }\n\n  return `@import url('${props.theme.fontImportUrl}');`;\n}\n\nconst GlobalStyle = createGlobalStyle<IGlobalStyleProps>`\n  ${getFontImport}\n\n  * {\n    font-family: ${props => props.theme.fontFamily};\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html {\n    font-size: 14px;\n  }\n`;\n\nGlobalStyle.displayName = 'GlobalStyle';\n\nexport default GlobalStyle;\ntry {\n    // @ts-ignore\n    GlobalStyleComponent.displayName = \"GlobalStyleComponent\";\n    // @ts-ignore\n    GlobalStyleComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"GlobalStyleComponent\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"DefaultTheme\" } }, \"suppressMultiMountWarning\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"suppressMultiMountWarning\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/globalStyle/index.tsx#GlobalStyleComponent\"] = { docgenInfo: GlobalStyleComponent.__docgenInfo, name: \"GlobalStyleComponent\", path: \"src/globalStyle/index.tsx#GlobalStyleComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from 'styled-components';\n\nimport Button from '../button';\n\nconst ButtonGroup = styled.span`\n  ${Button} {\n    border-radius: 0;\n    margin-right: 0;\n    z-index: 0;\n    position: relative;\n\n    &:first-of-type {\n      border-top-left-radius: ${props => props.theme.borderRadius};\n      border-bottom-left-radius: ${props => props.theme.borderRadius};\n    }\n\n    &:last-of-type {\n      border-top-right-radius: ${props => props.theme.borderRadius};\n      border-bottom-right-radius: ${props => props.theme.borderRadius};\n    }\n\n    &:focus {\n      z-index: 1;\n    }\n  }\n`;\n\nButtonGroup.displayName = 'ButtonGroup';\n\nexport default ButtonGroup;\n","import { mix, transparentize } from 'polished';\nimport styled from 'styled-components';\n\nexport interface ICheckboxProps {\n  theme: DefaultTheme;\n  checked?: boolean;\n}\n\nfunction getBorderColor(props: ICheckboxProps) {\n  return props.checked ? props.theme.colors.main : props.theme.colors.secondary;\n}\n\nfunction getHoverBorderColor(props: ICheckboxProps) {\n  return mix(props.checked ? 0.9 : 0.1, props.theme.colors.main, props.theme.colors.secondary);\n}\n\nconst Checkbox = styled.button<ICheckboxProps>`\n  border-radius: ${props => props.theme.borderRadius};\n  background-color: ${props => props.theme.colors.white};\n  border: 1px solid ${getBorderColor};\n  height: 2em;\n  width: 2em;\n  padding: 0;\n  display: inline-block;\n  outline: 0;\n  cursor: pointer;\n  transition: 0.25s border-color ease-in-out;\n  position: relative;\n  vertical-align: middle;\n  font-size: 1em;\n\n  &:hover {\n    border-color: ${getHoverBorderColor};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 2px ${props => transparentize(0.75, getBorderColor(props))};\n  }\n\n  &:disabled {\n    cursor: default;\n    opacity: 0.5;\n    border-color: ${getBorderColor};\n  }\n\n  &::before {\n    content: '';\n    width: 33%;\n    height: 66%;\n    border-width: 0 1px 1px 0;\n    border-color: ${props => props.theme.colors.main};\n    border-style: solid;\n    display: block;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%) rotate(45deg);\n    margin-top: -0.125em;\n    opacity: ${props => (props.checked ? 1 : 0)};\n    transition: 0.25s opacity ease-in-out;\n  }\n`;\n\nCheckbox.displayName = 'Checkbox';\n\nexport default Checkbox;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nexport interface IFormSection {\n  theme: DefaultTheme;\n  title: string;\n  error?: string;\n  className?: string;\n  children?: React.ReactNode;\n  required?: boolean;\n}\n\ninterface IFormSectionTitle {\n  theme: DefaultTheme;\n  required?: boolean;\n}\n\ninterface IFormSectionError {\n  theme: DefaultTheme;\n}\n\nconst SectionTitle = styled.div<IFormSectionTitle>`\n  font-size: 1em;\n  margin-bottom: 5px;\n  color: ${props => props.theme.colors.darkGray};\n\n  &::after {\n    content: '${props => (props.required ? ' *' : '')}';\n    color: ${props => props.theme.colors.error};\n    display: inline;\n  }\n`;\n\nSectionTitle.displayName = 'SectionTitle';\n\nconst SectionError = styled.div<IFormSectionError>`\n  color: ${props => props.theme.colors.error};\n  margin-top: 5px;\n  font-size: 0.75em;\n`;\n\nSectionError.displayName = 'SectionError';\n\nconst FormSection = styled((props: IFormSection) => (\n  <div className={props.className}>\n    <SectionTitle required={props.required}>{props.title}</SectionTitle>\n    {props.children}\n    {props.error && <SectionError>{props.error}</SectionError>}\n  </div>\n))`\n  margin-bottom: 20px;\n`;\n\nFormSection.displayName = 'FormSection';\n\nexport default FormSection;\n","import styled from 'styled-components';\nimport { transparentize } from 'polished';\n\nexport interface IPanelProps {\n  theme: DefaultTheme;\n}\n\nconst Panel = styled.div<IPanelProps>`\n  background-color: ${props => props.theme.colors.white};\n  border-radius: ${props => props.theme.borderRadius};\n  padding: 20px;\n  box-shadow: 0 5px 20px ${props => transparentize(0.9, props.theme.colors.darkGray)};\n  margin-bottom: 20px;\n`;\n\nPanel.displayName = 'Panel';\n\nexport default Panel;\n","import styled from 'styled-components';\n\nexport interface IProgressBarProps {\n  theme: DefaultTheme;\n  progress: number;\n  color?: string;\n}\n\nfunction getProgressBarColor(props: IProgressBarProps) {\n  if (props.color) {\n    return props.theme.colors[props.color];\n  }\n\n  return props.theme.colors.main;\n}\n\nconst ProgressBar = styled.div<IProgressBarProps>`\n  position: relative;\n  border-radius: ${props => props.theme.borderRadius};\n  height: 0.5em;\n  overflow: hidden;\n  box-shadow: inset 0 0 0 1px ${props => props.theme.colors.secondary};\n\n  &::before {\n    width: ${props => String(props.progress)}%;\n    transition: 0.25s width ease-in-out;\n    display: block;\n    content: '';\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    background-color: ${getProgressBarColor};\n  }\n`;\n\nProgressBar.displayName = 'ProgressBar';\n\nexport default ProgressBar;\n","import { ellipsis, getLuminance, mix } from 'polished';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../button';\n\nconst DEFAULT_COLOR = 'main';\n\nexport interface ISelectProps {\n  theme: DefaultTheme;\n  onSelect: (value: string) => void;\n  choices: Array<{ value: string; text: string }>;\n  value: string;\n  color?: string;\n  disabled?: boolean;\n}\n\nexport interface ISelectInnerProps {\n  theme: DefaultTheme;\n  onSelect: (value: string) => void;\n  choices: Array<{ value: string; text: string }>;\n  value: string;\n  className?: string;\n  color?: string;\n  disabled?: boolean;\n}\n\nfunction getDropdownColor(props: ISelectInnerProps): string {\n  return props.theme.colors[props.color || DEFAULT_COLOR];\n}\n\nfunction getArrowColor(props: ISelectInnerProps): string {\n  const bgColor = getDropdownColor(props);\n  return getLuminance(bgColor) > 0.5 ? props.theme.colors.darkGray : props.theme.colors.white;\n}\n\nconst SelectMenuRow = styled.button`\n  background-color: ${props => props.theme.colors.white};\n  padding: 0.75em 1em;\n  margin: 5px 0;\n  display: block;\n  width: 100%;\n  outline: 0;\n  border: none;\n  text-align: left;\n  cursor: pointer;\n  transition: 0.25s background-color ease-in-out;\n  font-size: 1em;\n\n  &:hover {\n    background-color: ${props => mix(0.5, props.theme.colors.secondary, props.theme.colors.white)};\n  }\n\n  &:last-of-type {\n    border-bottom: 0;\n  }\n`;\n\nconst SelectMenu = styled.div`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  border: 1px solid ${props => props.theme.colors.secondary};\n  border-radius: ${props => props.theme.borderRadius};\n  background-color: ${props => props.theme.colors.white};\n  min-width: 110%;\n  max-width: 150%;\n  margin: 5px 0 0 0;\n`;\n\nclass Select extends React.Component<ISelectInnerProps> {\n  public state = {\n    menuIsVisible: false,\n  };\n  private node: React.RefObject<HTMLDivElement>;\n\n  constructor(props: ISelectInnerProps) {\n    super(props);\n\n    this.node = React.createRef();\n  }\n\n  public componentDidMount() {\n    window.addEventListener('mousedown', this.handleGlobalClick, false);\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('mousedown', this.handleGlobalClick, false);\n  }\n\n  public render() {\n    const { className, color, value, choices, disabled } = this.props;\n    const { menuIsVisible } = this.state;\n\n    const buttonText = choices.reduce((acc, choice) => {\n      if (!acc && choice.value === value) {\n        return choice.text;\n      }\n      return acc;\n    }, '');\n\n    return (\n      <span className={className} ref={this.node}>\n        <Button color={color} onClick={this.toggleMenu} disabled={disabled}>\n          {buttonText}\n        </Button>\n        {menuIsVisible && this.renderMenu()}\n      </span>\n    );\n  }\n\n  private toggleMenu = () => {\n    const { menuIsVisible } = this.state;\n    this.setState({\n      menuIsVisible: !menuIsVisible,\n    });\n  };\n\n  private closeMenu = () => {\n    this.setState({\n      menuIsVisible: false,\n    });\n  };\n\n  private handleGlobalClick = (e: Event) => {\n    if (this.node.current && e.target instanceof Node && this.node.current.contains(e.target)) {\n      return;\n    }\n\n    this.closeMenu();\n  };\n\n  private handleSelect = (value: string) => {\n    const { onSelect } = this.props;\n    onSelect(value);\n    this.closeMenu();\n  };\n\n  private renderMenu = () => (\n    <SelectMenu>\n      {this.props.choices.map(({ value, text }) => (\n        <SelectMenuRow key={value} onClick={() => this.handleSelect(value)}>\n          {text}\n        </SelectMenuRow>\n      ))}\n    </SelectMenu>\n  );\n}\n\nconst StyledSelect = styled((props: ISelectInnerProps) => <Select {...props} />)<ISelectProps>`\n  margin-right: 5px;\n  position: relative;\n  display: inline-block;\n\n  ${Button} {\n    ${ellipsis('200px')}\n    position: relative;\n    padding-right: 2.5em;\n\n    &::after {\n      content: '';\n      width: 0.5em;\n      height: 0.5em;\n      display: inline-block;\n      border-width: 0 1px 1px 0;\n      border-style: solid;\n      transform: translateY(-50%) rotate(45deg);\n      margin-top: -2px;\n      position: absolute;\n      right: 1em;\n      top: 50%;\n      border-color: ${getArrowColor};\n    }\n  }\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n`;\n\nStyledSelect.displayName = 'Select';\n\nexport default StyledSelect;\n","import { getLuminance, mix, transparentize } from 'polished';\nimport styled from 'styled-components';\n\nconst DEFAULT_COLOR = 'main';\n\nexport interface IButtonProps {\n  theme: DefaultTheme;\n  color?: string;\n}\n\nfunction getButtonColor(props: IButtonProps): string {\n  return props.theme.colors[props.color || DEFAULT_COLOR];\n}\n\nfunction getButtonTextColor(props: IButtonProps): string {\n  const bgColor = getButtonColor(props);\n  return getLuminance(bgColor) > 0.5 ? props.theme.colors.darkGray : props.theme.colors.white;\n}\n\nconst Button = styled.button<IButtonProps>`\n  border-radius: ${props => props.theme.borderRadius};\n  background-color: ${getButtonColor};\n  color: ${getButtonTextColor};\n  border: 0;\n  cursor: pointer;\n  outline: 0;\n  font-size: 1em;\n  line-height: 1em;\n  padding: 0.75em 1em;\n  transition: 0.25s background-color ease-in-out;\n  margin-right: 5px;\n\n  &:hover {\n    background-color: ${props => mix(0.9, getButtonColor(props), getButtonTextColor(props))};\n  }\n\n  &:active {\n    transition: 0.05s background-color ease-in-out;\n    background-color: ${props => mix(0.85, getButtonColor(props), getButtonTextColor(props))};\n    color: ${props => mix(0.1, getButtonColor(props), getButtonTextColor(props))};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 2px ${props => transparentize(0.75, getButtonColor(props))};\n  }\n\n  &:disabled {\n    cursor: default;\n    opacity: 0.75;\n    background-color: ${getButtonColor};\n  }\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n`;\n\nButton.displayName = 'Button';\n\nexport default Button;\n"],"mappings":"AAAA;AAyBA;AAjBA;AAmBA;;;;;;;;;;;AAWA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;;;AAKA;ACrCA;AANA;;;;;;;;;;;;;AAsBA;;;ACrBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAKA;;;;;;;;AAQA;;AAIA;AC/CA;AACA;;AAWA;;;;;;;;AAUA;ACvBA;;;;;;;AAOA;AACA;;;;AAIA;AACA;;;;;;;AASA;ACVA;AACA;AACA;;;;;;;;;;;;;AAPA;;;;AAwBA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;AAQA;;;AAKA;;;ACvCA;AACA;;AAEA;AACA;;;AAKA;AAGA;;;AAKA;;AAYA;AC7CA;AACA;;AAEA;;AAIA;;ACGA;;;AAGA;AACA;;AAEA;;;;;;;;;AAhBA;;AA6BA;ACAA;;;;;;;;;;;;;AAaA;;;;;;AAQA;;;;AAIA;AACA;AACA;;;;AAMA;;;;;AAoFA;AACA;;;;;;;;;;;;;;;;AA5HA;;;;;;;AAqJA;AChKA;AACA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAQA","sourceRoot":""}